import random
import itertools

primes = {}


def is_prime(num):
    for j in range(30):
        a = random.randint(1, num - 1)
        if pow(a, (num - 1), num) != 1:
            return False
    return True


def valid_permutation_primes(i, n_max):
    result = []
    all_perumtations = itertools.permutations(str(i), r=len(str(i)))
    for j in all_perumtations:
        if j[0] == "0":
            pass
        else:
            if int("".join(j)) in primes and int("".join(j)) <= n_max:
                result.append(int("".join(j)))
    return sorted(set(result))


def permutational_primes(n_max, k_perms):
    lst_primes = []
    result = []
    if len(primes) == 0:
        for i in range(11, 50001):
            if is_prime(i) == True:
                primes[i] = i
        for i in range(3, n_max + 1):
            try:
                lst_primes.append(primes[i])
            except KeyError:
                pass

        for i in lst_primes:
            x = valid_permutation_primes(i, n_max)
            if x not in result and len(x) == k_perms + 1:
                result.append(x)

    else:
        for i in range(3, n_max + 1):
            try:
                lst_primes.append(primes[i])
            except KeyError:
                pass

        for i in lst_primes:
            x = valid_permutation_primes(i, n_max)
            if x not in result and len(x) == k_perms + 1:
                result.append(x)

    try:
        return [len(result), result[0][0], result[-1][0]]
    except IndexError:
        return [0,0,0]
